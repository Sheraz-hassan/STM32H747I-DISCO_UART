
Uart_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004944  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c1c  08004c1c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c24  08004c24  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08004c3c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08004c3c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156de  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e1  00000000  00000000  0003571c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00037d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  000387e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d9df  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb75  00000000  00000000  00076c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00191c7e  00000000  00000000  0008377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002153fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  00215450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004bc4 	.word	0x08004bc4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004bc4 	.word	0x08004bc4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t word [7]="teste\n\r";
 800070a:	4a30      	ldr	r2, [pc, #192]	; (80007cc <main+0xc8>)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000712:	6018      	str	r0, [r3, #0]
 8000714:	3304      	adds	r3, #4
 8000716:	8019      	strh	r1, [r3, #0]
 8000718:	3302      	adds	r3, #2
 800071a:	0c0a      	lsrs	r2, r1, #16
 800071c:	701a      	strb	r2, [r3, #0]
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000724:	bf00      	nop
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <main+0xcc>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <main+0x38>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	60fa      	str	r2, [r7, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	dcf4      	bgt.n	8000726 <main+0x22>
  if ( timeout < 0 )
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	da01      	bge.n	8000746 <main+0x42>
  {
  Error_Handler();
 8000742:	f000 f945 	bl	80009d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fa1b 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f847 	bl	80007dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <main+0xcc>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <main+0xcc>)
 8000756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <main+0xcc>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800076c:	2000      	movs	r0, #0
 800076e:	f000 fd91 	bl	8001294 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000772:	2100      	movs	r1, #0
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fda7 	bl	80012c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800077a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000780:	bf00      	nop
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <main+0xcc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d104      	bne.n	8000798 <main+0x94>
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	60fa      	str	r2, [r7, #12]
 8000794:	2b00      	cmp	r3, #0
 8000796:	dcf4      	bgt.n	8000782 <main+0x7e>
if ( timeout < 0 )
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	da01      	bge.n	80007a2 <main+0x9e>
{
Error_Handler();
 800079e:	f000 f917 	bl	80009d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 f8cf 	bl	8000944 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a6:	f000 f881 	bl	80008ac <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, word, 7,100);
 80007aa:	1d39      	adds	r1, r7, #4
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	2207      	movs	r2, #7
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <main+0xd0>)
 80007b2:	f003 f975 	bl	8003aa0 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <main+0xd4>)
 80007bc:	f000 fd4f 	bl	800125e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c4:	f000 fa6e 	bl	8000ca4 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, word, 7,100);
 80007c8:	e7ef      	b.n	80007aa <main+0xa6>
 80007ca:	bf00      	nop
 80007cc:	08004bdc 	.word	0x08004bdc
 80007d0:	58024400 	.word	0x58024400
 80007d4:	2400002c 	.word	0x2400002c
 80007d8:	58022000 	.word	0x58022000

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	; 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	224c      	movs	r2, #76	; 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 f9e2 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 f9dc 	bl	8004bb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f000 fd77 	bl	80012f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <SystemClock_Config+0xc8>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <SystemClock_Config+0xc8>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <SystemClock_Config+0xc8>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <SystemClock_Config+0xcc>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <SystemClock_Config+0xcc>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <SystemClock_Config+0xcc>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000834:	bf00      	nop
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <SystemClock_Config+0xcc>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000848:	2301      	movs	r3, #1
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2340      	movs	r3, #64	; 0x40
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fda3 	bl	80013a4 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000864:	f000 f8b4 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	233f      	movs	r3, #63	; 0x3f
 800086a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f001 f999 	bl	8001bc4 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000898:	f000 f89a 	bl	80009d0 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58000400 	.word	0x58000400
 80008a8:	58024800 	.word	0x58024800

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_USART1_UART_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008f6:	f003 f883 	bl	8003a00 <HAL_UART_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f866 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_USART1_UART_Init+0x90>)
 8000908:	f004 f866 	bl	80049d8 <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f85d 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_USART1_UART_Init+0x90>)
 800091a:	f004 f89b 	bl	8004a54 <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f854 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART1_UART_Init+0x90>)
 800092a:	f004 f81c 	bl	8004966 <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f84c 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2400002c 	.word	0x2400002c
 8000940:	40011000 	.word	0x40011000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_GPIO_Init+0x84>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <MX_GPIO_Init+0x84>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_GPIO_Init+0x84>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_GPIO_Init+0x84>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x84>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_GPIO_Init+0x84>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0x88>)
 800099e:	f000 fc45 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x88>)
 80009bc:	f000 fa86 	bl	8000ecc <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58022000 	.word	0x58022000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_MspInit+0x30>)
 80009e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x30>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x30>)
 80009f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	58024400 	.word	0x58024400

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ba      	sub	sp, #232	; 0xe8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	22c0      	movs	r2, #192	; 0xc0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 f8bf 	bl	8004bb4 <memset>
  if(huart->Instance==USART1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a24      	ldr	r2, [pc, #144]	; (8000acc <HAL_UART_MspInit+0xbc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d141      	bne.n	8000ac4 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fc44 	bl	80022dc <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a5a:	f7ff ffb9 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <HAL_UART_MspInit+0xc0>)
 8000a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a64:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <HAL_UART_MspInit+0xc0>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0xc0>)
 8000a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0xc0>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <HAL_UART_MspInit+0xc0>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0xc0>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a9a:	23c0      	movs	r3, #192	; 0xc0
 8000a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0xc4>)
 8000ac0:	f000 fa04 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	37e8      	adds	r7, #232	; 0xe8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	58024400 	.word	0x58024400
 8000ad4:	58020400 	.word	0x58020400

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f89e 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b30:	f7ff fd4e 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f004 f807 	bl	8004b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fdd1 	bl	8000704 <main>
  bx  lr
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000b68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b6c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b70:	08004c2c 	.word	0x08004c2c
  ldr r2, =_sbss
 8000b74:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b78:	240000c0 	.word	0x240000c0

08000b7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC3_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b86:	2003      	movs	r0, #3
 8000b88:	f000 f96e 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b8c:	f001 f9d0 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8000b90:	4602      	mov	r2, r0
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_Init+0x68>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	f003 030f 	and.w	r3, r3, #15
 8000b9c:	4913      	ldr	r1, [pc, #76]	; (8000bec <HAL_Init+0x6c>)
 8000b9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ba0:	f003 031f 	and.w	r3, r3, #31
 8000ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_Init+0x68>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_Init+0x6c>)
 8000bb4:	5cd3      	ldrb	r3, [r2, r3]
 8000bb6:	f003 031f 	and.w	r3, r3, #31
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_Init+0x70>)
 8000bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <HAL_Init+0x74>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f814 	bl	8000bf8 <HAL_InitTick>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e002      	b.n	8000be0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bda:	f7ff feff 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	58024400 	.word	0x58024400
 8000bec:	08004be4 	.word	0x08004be4
 8000bf0:	24000004 	.word	0x24000004
 8000bf4:	24000000 	.word	0x24000000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_InitTick+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e021      	b.n	8000c50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_InitTick+0x64>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f945 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f91d 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x68>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2400000c 	.word	0x2400000c
 8000c5c:	24000000 	.word	0x24000000
 8000c60:	24000008 	.word	0x24000008

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	2400000c 	.word	0x2400000c
 8000c88:	240000bc 	.word	0x240000bc

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	240000bc 	.word	0x240000bc

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffde 	bl	8000c8c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2400000c 	.word	0x2400000c

08000cec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetREVID+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0c1b      	lsrs	r3, r3, #16
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	5c001000 	.word	0x5c001000

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <__NVIC_SetPriorityGrouping+0x40>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x40>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	05fa0000 	.word	0x05fa0000

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff47 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb2 	bl	8000e24 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000eda:	4b89      	ldr	r3, [pc, #548]	; (8001100 <HAL_GPIO_Init+0x234>)
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ede:	e194      	b.n	800120a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8186 	beq.w	8001204 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d00b      	beq.n	8000f18 <HAL_GPIO_Init+0x4c>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	2b11      	cmp	r3, #17
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b12      	cmp	r3, #18
 8000f16:	d130      	bne.n	8000f7a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 0201 	and.w	r2, r3, #1
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0xee>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b12      	cmp	r3, #18
 8000fb8:	d123      	bne.n	8001002 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	69b9      	ldr	r1, [r7, #24]
 8000ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0203 	and.w	r2, r3, #3
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 80e0 	beq.w	8001204 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001044:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <HAL_GPIO_Init+0x238>)
 8001046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800104a:	4a2e      	ldr	r2, [pc, #184]	; (8001104 <HAL_GPIO_Init+0x238>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001054:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <HAL_GPIO_Init+0x238>)
 8001056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001062:	4a29      	ldr	r2, [pc, #164]	; (8001108 <HAL_GPIO_Init+0x23c>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <HAL_GPIO_Init+0x240>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d052      	beq.n	8001134 <HAL_GPIO_Init+0x268>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <HAL_GPIO_Init+0x244>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d031      	beq.n	80010fa <HAL_GPIO_Init+0x22e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_GPIO_Init+0x248>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d02b      	beq.n	80010f6 <HAL_GPIO_Init+0x22a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_GPIO_Init+0x24c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d025      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_GPIO_Init+0x250>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x222>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_GPIO_Init+0x254>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x21e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <HAL_GPIO_Init+0x258>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x25c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <HAL_GPIO_Init+0x260>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_GPIO_Init+0x264>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x20e>
 80010d6:	2309      	movs	r3, #9
 80010d8:	e02d      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010da:	230a      	movs	r3, #10
 80010dc:	e02b      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010de:	2308      	movs	r3, #8
 80010e0:	e029      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e027      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010e6:	2306      	movs	r3, #6
 80010e8:	e025      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e023      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e021      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e01f      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e01d      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e01b      	b.n	8001136 <HAL_GPIO_Init+0x26a>
 80010fe:	bf00      	nop
 8001100:	58000080 	.word	0x58000080
 8001104:	58024400 	.word	0x58024400
 8001108:	58000400 	.word	0x58000400
 800110c:	58020000 	.word	0x58020000
 8001110:	58020400 	.word	0x58020400
 8001114:	58020800 	.word	0x58020800
 8001118:	58020c00 	.word	0x58020c00
 800111c:	58021000 	.word	0x58021000
 8001120:	58021400 	.word	0x58021400
 8001124:	58021800 	.word	0x58021800
 8001128:	58021c00 	.word	0x58021c00
 800112c:	58022000 	.word	0x58022000
 8001130:	58022400 	.word	0x58022400
 8001134:	2300      	movs	r3, #0
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001146:	4938      	ldr	r1, [pc, #224]	; (8001228 <HAL_GPIO_Init+0x35c>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	3301      	adds	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f ae63 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3724      	adds	r7, #36	; 0x24
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	58000400 	.word	0x58000400

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001270:	887a      	ldrh	r2, [r7, #2]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	041a      	lsls	r2, r3, #16
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43d9      	mvns	r1, r3
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	400b      	ands	r3, r1
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_HSEM_FastTake+0x2c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3320      	adds	r3, #32
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_HSEM_FastTake+0x30>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e000      	b.n	80012b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	58026400 	.word	0x58026400
 80012c4:	80000300 	.word	0x80000300

080012c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012d2:	4906      	ldr	r1, [pc, #24]	; (80012ec <HAL_HSEM_Release+0x24>)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	58026400 	.word	0x58026400

080012f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	2b06      	cmp	r3, #6
 8001302:	d00a      	beq.n	800131a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e040      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e03e      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001322:	491f      	ldr	r1, [pc, #124]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800132a:	f7ff fcaf 	bl	8000c8c <HAL_GetTick>
 800132e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001330:	e009      	b.n	8001346 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001332:	f7ff fcab 	bl	8000c8c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001340:	d901      	bls.n	8001346 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e028      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001352:	d1ee      	bne.n	8001332 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b1e      	cmp	r3, #30
 8001358:	d008      	beq.n	800136c <HAL_PWREx_ConfigSupply+0x7c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b2e      	cmp	r3, #46	; 0x2e
 800135e:	d005      	beq.n	800136c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b1d      	cmp	r3, #29
 8001364:	d002      	beq.n	800136c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b2d      	cmp	r3, #45	; 0x2d
 800136a:	d114      	bne.n	8001396 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800136c:	f7ff fc8e 	bl	8000c8c <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001372:	e009      	b.n	8001388 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001374:	f7ff fc8a 	bl	8000c8c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001382:	d901      	bls.n	8001388 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e007      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d1ee      	bne.n	8001374 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	58024800 	.word	0x58024800

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e3ff      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8087 	beq.w	80014d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c4:	4b99      	ldr	r3, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013ce:	4b97      	ldr	r3, [pc, #604]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d007      	beq.n	80013ea <HAL_RCC_OscConfig+0x46>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	2b18      	cmp	r3, #24
 80013de:	d110      	bne.n	8001402 <HAL_RCC_OscConfig+0x5e>
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d10b      	bne.n	8001402 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ea:	4b90      	ldr	r3, [pc, #576]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d06c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x12c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d168      	bne.n	80014d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e3d9      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x76>
 800140c:	4b87      	ldr	r3, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a86      	ldr	r2, [pc, #536]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e02e      	b.n	8001478 <HAL_RCC_OscConfig+0xd4>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x98>
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a81      	ldr	r2, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b7f      	ldr	r3, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7e      	ldr	r2, [pc, #504]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e01d      	b.n	8001478 <HAL_RCC_OscConfig+0xd4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0xbc>
 8001446:	4b79      	ldr	r3, [pc, #484]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a78      	ldr	r2, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0xd4>
 8001460:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6e      	ldr	r2, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fc04 	bl	8000c8c <HAL_GetTick>
 8001484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fc00 	bl	8000c8c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e38d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0xe4>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fbf0 	bl	8000c8c <HAL_GetTick>
 80014ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fbec 	bl	8000c8c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e379      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x10c>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80ae 	beq.w	800163c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ea:	4b50      	ldr	r3, [pc, #320]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_RCC_OscConfig+0x162>
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	2b18      	cmp	r3, #24
 80014fa:	d13a      	bne.n	8001572 <HAL_RCC_OscConfig+0x1ce>
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d135      	bne.n	8001572 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x17a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e34b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	f7ff fbe5 	bl	8000cec <HAL_GetREVID>
 8001522:	4603      	mov	r3, r0
 8001524:	f241 0203 	movw	r2, #4099	; 0x1003
 8001528:	4293      	cmp	r3, r2
 800152a:	d817      	bhi.n	800155c <HAL_RCC_OscConfig+0x1b8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b40      	cmp	r3, #64	; 0x40
 8001532:	d108      	bne.n	8001546 <HAL_RCC_OscConfig+0x1a2>
 8001534:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800153c:	4a3b      	ldr	r2, [pc, #236]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001542:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	e07a      	b.n	800163c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	031b      	lsls	r3, r3, #12
 8001554:	4935      	ldr	r1, [pc, #212]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155a:	e06f      	b.n	800163c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	4930      	ldr	r1, [pc, #192]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	e064      	b.n	800163c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d045      	beq.n	8001606 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0219 	bic.w	r2, r3, #25
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4929      	ldr	r1, [pc, #164]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fb7e 	bl	8000c8c <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff fb7a 	bl	8000c8c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e307      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	f7ff fb9b 	bl	8000cec <HAL_GetREVID>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80015bc:	4293      	cmp	r3, r2
 80015be:	d817      	bhi.n	80015f0 <HAL_RCC_OscConfig+0x24c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b40      	cmp	r3, #64	; 0x40
 80015c6:	d108      	bne.n	80015da <HAL_RCC_OscConfig+0x236>
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015d0:	4a16      	ldr	r2, [pc, #88]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d6:	6053      	str	r3, [r2, #4]
 80015d8:	e030      	b.n	800163c <HAL_RCC_OscConfig+0x298>
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	031b      	lsls	r3, r3, #12
 80015e8:	4910      	ldr	r1, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
 80015ee:	e025      	b.n	800163c <HAL_RCC_OscConfig+0x298>
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	490b      	ldr	r1, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e01a      	b.n	800163c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fb3b 	bl	8000c8c <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fb37 	bl	8000c8c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d903      	bls.n	8001630 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e2c4      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
 800162c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001630:	4ba4      	ldr	r3, [pc, #656]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ee      	bne.n	800161a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a9 	beq.w	800179c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	4b9e      	ldr	r3, [pc, #632]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001652:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001654:	4b9b      	ldr	r3, [pc, #620]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d007      	beq.n	8001670 <HAL_RCC_OscConfig+0x2cc>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b18      	cmp	r3, #24
 8001664:	d13a      	bne.n	80016dc <HAL_RCC_OscConfig+0x338>
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d135      	bne.n	80016dc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001670:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_OscConfig+0x2e4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b80      	cmp	r3, #128	; 0x80
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e296      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001688:	f7ff fb30 	bl	8000cec <HAL_GetREVID>
 800168c:	4603      	mov	r3, r0
 800168e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001692:	4293      	cmp	r3, r2
 8001694:	d817      	bhi.n	80016c6 <HAL_RCC_OscConfig+0x322>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	2b20      	cmp	r3, #32
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_OscConfig+0x30c>
 800169e:	4b89      	ldr	r3, [pc, #548]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016a6:	4a87      	ldr	r2, [pc, #540]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ae:	e075      	b.n	800179c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016b0:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	069b      	lsls	r3, r3, #26
 80016be:	4981      	ldr	r1, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016c4:	e06a      	b.n	800179c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c6:	4b7f      	ldr	r3, [pc, #508]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	497b      	ldr	r1, [pc, #492]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016da:	e05f      	b.n	800179c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d042      	beq.n	800176a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016e4:	4b77      	ldr	r3, [pc, #476]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a76      	ldr	r2, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80016ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff facc 	bl	8000c8c <HAL_GetTick>
 80016f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016f8:	f7ff fac8 	bl	8000c8c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e255      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800170a:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001716:	f7ff fae9 	bl	8000cec <HAL_GetREVID>
 800171a:	4603      	mov	r3, r0
 800171c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001720:	4293      	cmp	r3, r2
 8001722:	d817      	bhi.n	8001754 <HAL_RCC_OscConfig+0x3b0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2b20      	cmp	r3, #32
 800172a:	d108      	bne.n	800173e <HAL_RCC_OscConfig+0x39a>
 800172c:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001734:	4a63      	ldr	r2, [pc, #396]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800173a:	6053      	str	r3, [r2, #4]
 800173c:	e02e      	b.n	800179c <HAL_RCC_OscConfig+0x3f8>
 800173e:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	069b      	lsls	r3, r3, #26
 800174c:	495d      	ldr	r1, [pc, #372]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
 8001752:	e023      	b.n	800179c <HAL_RCC_OscConfig+0x3f8>
 8001754:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	4958      	ldr	r1, [pc, #352]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800176a:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fa89 	bl	8000c8c <HAL_GetTick>
 800177a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800177e:	f7ff fa85 	bl	8000c8c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e212      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d036      	beq.n	8001816 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d019      	beq.n	80017e4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fa66 	bl	8000c8c <HAL_GetTick>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fa62 	bl	8000c8c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1ef      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80017d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x420>
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e4:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80017e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e8:	4a36      	ldr	r2, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fa4c 	bl	8000c8c <HAL_GetTick>
 80017f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fa48 	bl	8000c8c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1d5      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b00      	cmp	r3, #0
 8001820:	d036      	beq.n	8001890 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d019      	beq.n	800185e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001834:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001836:	f7ff fa29 	bl	8000c8c <HAL_GetTick>
 800183a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800183e:	f7ff fa25 	bl	8000c8c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1b2      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x49a>
 800185c:	e018      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001868:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800186a:	f7ff fa0f 	bl	8000c8c <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001872:	f7ff fa0b 	bl	8000c8c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e198      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_RCC_OscConfig+0x520>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8085 	beq.w	80019a8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_OscConfig+0x524>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x524>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018aa:	f7ff f9ef 	bl	8000c8c <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b0:	e00c      	b.n	80018cc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff f9eb 	bl	8000c8c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	d905      	bls.n	80018cc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e178      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
 80018c4:	58024400 	.word	0x58024400
 80018c8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018cc:	4b96      	ldr	r3, [pc, #600]	; (8001b28 <HAL_RCC_OscConfig+0x784>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ec      	beq.n	80018b2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x54a>
 80018e0:	4b92      	ldr	r3, [pc, #584]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	4a91      	ldr	r2, [pc, #580]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	; 0x70
 80018ec:	e02d      	b.n	800194a <HAL_RCC_OscConfig+0x5a6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x56c>
 80018f6:	4b8d      	ldr	r3, [pc, #564]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a8c      	ldr	r2, [pc, #560]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
 8001902:	4b8a      	ldr	r3, [pc, #552]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	4a89      	ldr	r2, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	e01c      	b.n	800194a <HAL_RCC_OscConfig+0x5a6>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x58e>
 8001918:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a83      	ldr	r2, [pc, #524]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	4a80      	ldr	r2, [pc, #512]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
 8001930:	e00b      	b.n	800194a <HAL_RCC_OscConfig+0x5a6>
 8001932:	4b7e      	ldr	r3, [pc, #504]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a7d      	ldr	r2, [pc, #500]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	4a7a      	ldr	r2, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d015      	beq.n	800197e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff f99b 	bl	8000c8c <HAL_GetTick>
 8001956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff f997 	bl	8000c8c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e122      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ee      	beq.n	800195a <HAL_RCC_OscConfig+0x5b6>
 800197c:	e014      	b.n	80019a8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f985 	bl	8000c8c <HAL_GetTick>
 8001982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff f981 	bl	8000c8c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e10c      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800199c:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1ee      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8101 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019b2:	4b5e      	ldr	r3, [pc, #376]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ba:	2b18      	cmp	r3, #24
 80019bc:	f000 80bc 	beq.w	8001b38 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	f040 8095 	bne.w	8001af4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80019d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f959 	bl	8000c8c <HAL_GetTick>
 80019da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff f955 	bl	8000c8c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0e2      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019f0:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fc:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 80019fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a00:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_RCC_OscConfig+0x78c>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	4946      	ldr	r1, [pc, #280]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	628b      	str	r3, [r1, #40]	; 0x28
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	3b01      	subs	r3, #1
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	3b01      	subs	r3, #1
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a46:	4939      	ldr	r1, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_RCC_OscConfig+0x790>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a64:	00d2      	lsls	r2, r2, #3
 8001a66:	4931      	ldr	r1, [pc, #196]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	f023 020c 	bic.w	r2, r3, #12
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	492c      	ldr	r1, [pc, #176]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	f023 0202 	bic.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4928      	ldr	r1, [pc, #160]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f8de 	bl	8000c8c <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f8da 	bl	8000c8c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e067      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x730>
 8001af2:	e05f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f8c4 	bl	8000c8c <HAL_GetTick>
 8001b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f8c0 	bl	8000c8c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e04d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_RCC_OscConfig+0x788>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x764>
 8001b26:	e045      	b.n	8001bb4 <HAL_RCC_OscConfig+0x810>
 8001b28:	58024800 	.word	0x58024800
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	fffffc0c 	.word	0xfffffc0c
 8001b34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x81c>)
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_OscConfig+0x81c>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d031      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f003 0203 	and.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d12a      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d122      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d11a      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	0a5b      	lsrs	r3, r3, #9
 8001b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d111      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d108      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0e1b      	lsrs	r3, r3, #24
 8001ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001baa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3730      	adds	r7, #48	; 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e19c      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b8a      	ldr	r3, [pc, #552]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d910      	bls.n	8001c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b87      	ldr	r3, [pc, #540]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 020f 	bic.w	r2, r3, #15
 8001bee:	4985      	ldr	r1, [pc, #532]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e184      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d010      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d908      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c24:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	4975      	ldr	r1, [pc, #468]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d010      	beq.n	8001c64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d908      	bls.n	8001c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	496a      	ldr	r1, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d908      	bls.n	8001c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	495e      	ldr	r1, [pc, #376]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d010      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d908      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cae:	4b56      	ldr	r3, [pc, #344]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4953      	ldr	r1, [pc, #332]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d908      	bls.n	8001cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f023 020f 	bic.w	r2, r3, #15
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4947      	ldr	r1, [pc, #284]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d055      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4940      	ldr	r1, [pc, #256]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d14:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d121      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0f6      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d115      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0ea      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0de      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0d6      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f023 0207 	bic.w	r2, r3, #7
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4925      	ldr	r1, [pc, #148]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7fe ff89 	bl	8000c8c <HAL_GetTick>
 8001d7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f7fe ff85 	bl	8000c8c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0be      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d1eb      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d010      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d208      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f023 020f 	bic.w	r2, r3, #15
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	490e      	ldr	r1, [pc, #56]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d214      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 020f 	bic.w	r2, r3, #15
 8001dea:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e086      	b.n	8001f12 <HAL_RCC_ClockConfig+0x34e>
 8001e04:	52002000 	.word	0x52002000
 8001e08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d208      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e28:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d208      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	492e      	ldr	r1, [pc, #184]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d208      	bcs.n	8001e96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4922      	ldr	r1, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d010      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d208      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4917      	ldr	r1, [pc, #92]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ec4:	f000 f834 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	4912      	ldr	r1, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x35c>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_RCC_ClockConfig+0x358>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_RCC_ClockConfig+0x35c>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x360>)
 8001efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x364>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x368>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fe76 	bl	8000bf8 <HAL_InitTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	08004be4 	.word	0x08004be4
 8001f24:	24000004 	.word	0x24000004
 8001f28:	24000000 	.word	0x24000000
 8001f2c:	24000008 	.word	0x24000008

08001f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f36:	4bb3      	ldr	r3, [pc, #716]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f3e:	2b18      	cmp	r3, #24
 8001f40:	f200 8155 	bhi.w	80021ee <HAL_RCC_GetSysClockFreq+0x2be>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001fb1 	.word	0x08001fb1
 8001f50:	080021ef 	.word	0x080021ef
 8001f54:	080021ef 	.word	0x080021ef
 8001f58:	080021ef 	.word	0x080021ef
 8001f5c:	080021ef 	.word	0x080021ef
 8001f60:	080021ef 	.word	0x080021ef
 8001f64:	080021ef 	.word	0x080021ef
 8001f68:	080021ef 	.word	0x080021ef
 8001f6c:	08001fd7 	.word	0x08001fd7
 8001f70:	080021ef 	.word	0x080021ef
 8001f74:	080021ef 	.word	0x080021ef
 8001f78:	080021ef 	.word	0x080021ef
 8001f7c:	080021ef 	.word	0x080021ef
 8001f80:	080021ef 	.word	0x080021ef
 8001f84:	080021ef 	.word	0x080021ef
 8001f88:	080021ef 	.word	0x080021ef
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	080021ef 	.word	0x080021ef
 8001f94:	080021ef 	.word	0x080021ef
 8001f98:	080021ef 	.word	0x080021ef
 8001f9c:	080021ef 	.word	0x080021ef
 8001fa0:	080021ef 	.word	0x080021ef
 8001fa4:	080021ef 	.word	0x080021ef
 8001fa8:	080021ef 	.word	0x080021ef
 8001fac:	08001fe3 	.word	0x08001fe3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fb0:	4b94      	ldr	r3, [pc, #592]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fbc:	4b91      	ldr	r3, [pc, #580]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	4a90      	ldr	r2, [pc, #576]	; (8002208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001fce:	e111      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001fd0:	4b8d      	ldr	r3, [pc, #564]	; (8002208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fd2:	61bb      	str	r3, [r7, #24]
    break;
 8001fd4:	e10e      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001fd6:	4b8d      	ldr	r3, [pc, #564]	; (800220c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fd8:	61bb      	str	r3, [r7, #24]
    break;
 8001fda:	e10b      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001fde:	61bb      	str	r3, [r7, #24]
    break;
 8001fe0:	e108      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001fe2:	4b88      	ldr	r3, [pc, #544]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001fec:	4b85      	ldr	r3, [pc, #532]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ff8:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002002:	4b80      	ldr	r3, [pc, #512]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80e1 	beq.w	80021e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b02      	cmp	r3, #2
 800202a:	f000 8083 	beq.w	8002134 <HAL_RCC_GetSysClockFreq+0x204>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b02      	cmp	r3, #2
 8002032:	f200 80a1 	bhi.w	8002178 <HAL_RCC_GetSysClockFreq+0x248>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x114>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d056      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002042:	e099      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002044:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02d      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002050:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	4a6b      	ldr	r2, [pc, #428]	; (8002208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207a:	4b62      	ldr	r3, [pc, #392]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208a:	ed97 6a02 	vldr	s12, [r7, #8]
 800208e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800209e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020aa:	e087      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020be:	4b51      	ldr	r3, [pc, #324]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80020d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020ee:	e065      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800221c <HAL_RCC_GetSysClockFreq+0x2ec>
 80020fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002102:	4b40      	ldr	r3, [pc, #256]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002112:	ed97 6a02 	vldr	s12, [r7, #8]
 8002116:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800211a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800211e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002132:	e043      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002156:	ed97 6a02 	vldr	s12, [r7, #8]
 800215a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800215e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800216a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002176:	e021      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002182:	eddf 6a26 	vldr	s13, [pc, #152]	; 800221c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219a:	ed97 6a02 	vldr	s12, [r7, #8]
 800219e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	0a5b      	lsrs	r3, r3, #9
 80021c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c6:	3301      	adds	r3, #1
 80021c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80021d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e0:	ee17 3a90 	vmov	r3, s15
 80021e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80021e6:	e005      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
    break;
 80021ec:	e002      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021f0:	61bb      	str	r3, [r7, #24]
    break;
 80021f2:	bf00      	nop
  }

  return sysclockfreq;
 80021f4:	69bb      	ldr	r3, [r7, #24]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	58024400 	.word	0x58024400
 8002208:	03d09000 	.word	0x03d09000
 800220c:	003d0900 	.word	0x003d0900
 8002210:	017d7840 	.word	0x017d7840
 8002214:	46000000 	.word	0x46000000
 8002218:	4c742400 	.word	0x4c742400
 800221c:	4a742400 	.word	0x4a742400
 8002220:	4bbebc20 	.word	0x4bbebc20

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800222a:	f7ff fe81 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 800222e:	4602      	mov	r2, r0
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_GetHCLKFreq+0x50>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	490f      	ldr	r1, [pc, #60]	; (8002278 <HAL_RCC_GetHCLKFreq+0x54>)
 800223c:	5ccb      	ldrb	r3, [r1, r3]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_GetHCLKFreq+0x50>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_GetHCLKFreq+0x54>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_RCC_GetHCLKFreq+0x58>)
 8002260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <HAL_RCC_GetHCLKFreq+0x58>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	58024400 	.word	0x58024400
 8002278:	08004be4 	.word	0x08004be4
 800227c:	24000004 	.word	0x24000004
 8002280:	24000000 	.word	0x24000000

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002288:	f7ff ffcc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58024400 	.word	0x58024400
 80022ac:	08004be4 	.word	0x08004be4

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80022b4:	f7ff ffb6 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4904      	ldr	r1, [pc, #16]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	58024400 	.word	0x58024400
 80022d8:	08004be4 	.word	0x08004be4

080022dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03f      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002300:	d02a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002306:	d824      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800230c:	d018      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800230e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002312:	d81e      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800231c:	d007      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800231e:	e018      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002320:	4bab      	ldr	r3, [pc, #684]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	4aaa      	ldr	r2, [pc, #680]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800232c:	e015      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	2102      	movs	r1, #2
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f9ff 	bl	8003738 <RCCEx_PLL2_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800233e:	e00c      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3324      	adds	r3, #36	; 0x24
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f001 faa8 	bl	800389c <RCCEx_PLL3_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002350:	e003      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
      break;
 8002356:	e000      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002360:	4b9b      	ldr	r3, [pc, #620]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236c:	4998      	ldr	r1, [pc, #608]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	650b      	str	r3, [r1, #80]	; 0x50
 8002372:	e001      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d03d      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	2b04      	cmp	r3, #4
 800238a:	d826      	bhi.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023a9 	.word	0x080023a9
 8002398:	080023b7 	.word	0x080023b7
 800239c:	080023c9 	.word	0x080023c9
 80023a0:	080023e1 	.word	0x080023e1
 80023a4:	080023e1 	.word	0x080023e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a8:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	4a88      	ldr	r2, [pc, #544]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023b4:	e015      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 f9bb 	bl	8003738 <RCCEx_PLL2_Config>
 80023c2:	4603      	mov	r3, r0
 80023c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023c6:	e00c      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3324      	adds	r3, #36	; 0x24
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f001 fa64 	bl	800389c <RCCEx_PLL3_Config>
 80023d4:	4603      	mov	r3, r0
 80023d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023d8:	e003      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
      break;
 80023de:	e000      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80023e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ec:	f023 0207 	bic.w	r2, r3, #7
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	4976      	ldr	r1, [pc, #472]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	650b      	str	r3, [r1, #80]	; 0x50
 80023fa:	e001      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002408:	2b00      	cmp	r3, #0
 800240a:	d042      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002414:	d02b      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241a:	d825      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800241c:	2bc0      	cmp	r3, #192	; 0xc0
 800241e:	d028      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002420:	2bc0      	cmp	r3, #192	; 0xc0
 8002422:	d821      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d016      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d81d      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d007      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002434:	e018      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002436:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	4a65      	ldr	r2, [pc, #404]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002442:	e017      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f001 f974 	bl	8003738 <RCCEx_PLL2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002454:	e00e      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3324      	adds	r3, #36	; 0x24
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f001 fa1d 	bl	800389c <RCCEx_PLL3_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002466:	e005      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	75fb      	strb	r3, [r7, #23]
      break;
 800246c:	e002      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800246e:	bf00      	nop
 8002470:	e000      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800247a:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	4952      	ldr	r1, [pc, #328]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	650b      	str	r3, [r1, #80]	; 0x50
 800248c:	e001      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249a:	2b00      	cmp	r3, #0
 800249c:	d049      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024a8:	d030      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80024aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ae:	d82a      	bhi.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80024b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024b4:	d02c      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80024b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024ba:	d824      	bhi.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80024bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c0:	d018      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c6:	d81e      	bhi.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80024cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d0:	d007      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80024d2:	e018      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	4a3d      	ldr	r2, [pc, #244]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024e0:	e017      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 f925 	bl	8003738 <RCCEx_PLL2_Config>
 80024ee:	4603      	mov	r3, r0
 80024f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80024f2:	e00e      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3324      	adds	r3, #36	; 0x24
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 f9ce 	bl	800389c <RCCEx_PLL3_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002504:	e005      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
      break;
 800250a:	e002      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800250c:	bf00      	nop
 800250e:	e000      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002526:	492a      	ldr	r1, [pc, #168]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	658b      	str	r3, [r1, #88]	; 0x58
 800252c:	e001      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253a:	2b00      	cmp	r3, #0
 800253c:	d04c      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002548:	d030      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800254a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254e:	d82a      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002550:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002554:	d02c      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800255a:	d824      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800255c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002560:	d018      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002566:	d81e      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d007      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002572:	e018      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002580:	e017      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f8d5 	bl	8003738 <RCCEx_PLL2_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002592:	e00e      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3324      	adds	r3, #36	; 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f97e 	bl	800389c <RCCEx_PLL3_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025a4:	e005      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
      break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80025ac:	bf00      	nop
 80025ae:	e000      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80025b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80025c6:	4902      	ldr	r1, [pc, #8]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	658b      	str	r3, [r1, #88]	; 0x58
 80025cc:	e004      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80025ce:	bf00      	nop
 80025d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d032      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	2b30      	cmp	r3, #48	; 0x30
 80025ea:	d01c      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80025ec:	2b30      	cmp	r3, #48	; 0x30
 80025ee:	d817      	bhi.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d00c      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d813      	bhi.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d10f      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002600:	4bb1      	ldr	r3, [pc, #708]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4ab0      	ldr	r2, [pc, #704]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800260c:	e00e      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f001 f88f 	bl	8003738 <RCCEx_PLL2_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800261e:	e005      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	75fb      	strb	r3, [r7, #23]
      break;
 8002624:	e002      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800262a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002632:	4ba5      	ldr	r3, [pc, #660]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263e:	49a2      	ldr	r1, [pc, #648]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002644:	e001      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d047      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800265e:	d030      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002664:	d82a      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800266a:	d02c      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800266c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002670:	d824      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002676:	d018      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267c:	d81e      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	d007      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002688:	e018      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	4a8e      	ldr	r2, [pc, #568]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002696:	e017      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f84a 	bl	8003738 <RCCEx_PLL2_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026a8:	e00e      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3324      	adds	r3, #36	; 0x24
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 f8f3 	bl	800389c <RCCEx_PLL3_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026ba:	e005      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
      break;
 80026c0:	e002      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80026c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80026ce:	4b7e      	ldr	r3, [pc, #504]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	497b      	ldr	r1, [pc, #492]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	650b      	str	r3, [r1, #80]	; 0x50
 80026e0:	e001      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d049      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fa:	d02e      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d828      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002706:	d02a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800270c:	d822      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800270e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002712:	d026      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002714:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002718:	d81c      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800271a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800271e:	d010      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002724:	d816      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01d      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d111      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fffe 	bl	8003738 <RCCEx_PLL2_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002740:	e012      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3324      	adds	r3, #36	; 0x24
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f001 f8a7 	bl	800389c <RCCEx_PLL3_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002752:	e009      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
      break;
 8002758:	e006      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800275a:	bf00      	nop
 800275c:	e004      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800275e:	bf00      	nop
 8002760:	e002      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002762:	bf00      	nop
 8002764:	e000      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800276e:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800277a:	4953      	ldr	r1, [pc, #332]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	650b      	str	r3, [r1, #80]	; 0x50
 8002780:	e001      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d04b      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279c:	d02e      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800279e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a2:	d828      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a8:	d02a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80027aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ae:	d822      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027b4:	d026      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80027b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027ba:	d81c      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c0:	d010      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80027c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c6:	d816      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01d      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80027cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027d0:	d111      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 ffad 	bl	8003738 <RCCEx_PLL2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80027e2:	e012      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3324      	adds	r3, #36	; 0x24
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 f856 	bl	800389c <RCCEx_PLL3_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80027f4:	e009      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
      break;
 80027fa:	e006      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80027fc:	bf00      	nop
 80027fe:	e004      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002800:	bf00      	nop
 8002802:	e002      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800281e:	492a      	ldr	r1, [pc, #168]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	658b      	str	r3, [r1, #88]	; 0x58
 8002824:	e001      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d022      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x580>
 800283e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002842:	d108      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f000 ff74 	bl	8003738 <RCCEx_PLL2_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002854:	e003      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
      break;
 800285a:	e000      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 800285c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002868:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	4915      	ldr	r1, [pc, #84]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002872:	4313      	orrs	r3, r2
 8002874:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002876:	e001      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d031      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002890:	d00e      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002896:	d814      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d017      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 800289c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a0:	d10f      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028ae:	e00e      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff3e 	bl	8003738 <RCCEx_PLL2_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028c0:	e005      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80028c8:	58024400 	.word	0x58024400
      break;
 80028cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028d4:	4bbc      	ldr	r3, [pc, #752]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	49b9      	ldr	r1, [pc, #740]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	650b      	str	r3, [r1, #80]	; 0x50
 80028e6:	e001      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d032      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d81b      	bhi.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800293f 	.word	0x0800293f
 800290c:	08002919 	.word	0x08002919
 8002910:	08002927 	.word	0x08002927
 8002914:	0800293f 	.word	0x0800293f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002918:	4bab      	ldr	r3, [pc, #684]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	4aaa      	ldr	r2, [pc, #680]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800291e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002924:	e00c      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f000 ff03 	bl	8003738 <RCCEx_PLL2_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002936:	e003      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
      break;
 800293c:	e000      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 800293e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002946:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	499d      	ldr	r1, [pc, #628]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002954:	4313      	orrs	r3, r2
 8002956:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002958:	e001      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8086 	beq.w	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800296c:	4b97      	ldr	r3, [pc, #604]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a96      	ldr	r2, [pc, #600]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002978:	f7fe f988 	bl	8000c8c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800297e:	e009      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002980:	f7fe f984 	bl	8000c8c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d902      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	75fb      	strb	r3, [r7, #23]
        break;
 8002992:	e005      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002994:	4b8d      	ldr	r3, [pc, #564]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ef      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d166      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029a6:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029b0:	4053      	eors	r3, r2
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d013      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ba:	4b83      	ldr	r3, [pc, #524]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c4:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a7f      	ldr	r2, [pc, #508]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d0:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a7c      	ldr	r2, [pc, #496]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029dc:	4a7a      	ldr	r2, [pc, #488]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ec:	d115      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe f94d 	bl	8000c8c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f4:	e00b      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe f949 	bl	8000c8c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d902      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8002a0c:	e005      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ed      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d126      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2e:	d10d      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002a30:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a3e:	0919      	lsrs	r1, r3, #4
 8002a40:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8002a42:	400b      	ands	r3, r1
 8002a44:	4960      	ldr	r1, [pc, #384]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	610b      	str	r3, [r1, #16]
 8002a4a:	e005      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002a4c:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a56:	6113      	str	r3, [r2, #16]
 8002a58:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	4958      	ldr	r1, [pc, #352]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	670b      	str	r3, [r1, #112]	; 0x70
 8002a6c:	e004      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a6e:	7dfb      	ldrb	r3, [r7, #23]
 8002a70:	75bb      	strb	r3, [r7, #22]
 8002a72:	e001      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d07e      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a88:	2b28      	cmp	r3, #40	; 0x28
 8002a8a:	d867      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002b63 	.word	0x08002b63
 8002a98:	08002b5d 	.word	0x08002b5d
 8002a9c:	08002b5d 	.word	0x08002b5d
 8002aa0:	08002b5d 	.word	0x08002b5d
 8002aa4:	08002b5d 	.word	0x08002b5d
 8002aa8:	08002b5d 	.word	0x08002b5d
 8002aac:	08002b5d 	.word	0x08002b5d
 8002ab0:	08002b5d 	.word	0x08002b5d
 8002ab4:	08002b39 	.word	0x08002b39
 8002ab8:	08002b5d 	.word	0x08002b5d
 8002abc:	08002b5d 	.word	0x08002b5d
 8002ac0:	08002b5d 	.word	0x08002b5d
 8002ac4:	08002b5d 	.word	0x08002b5d
 8002ac8:	08002b5d 	.word	0x08002b5d
 8002acc:	08002b5d 	.word	0x08002b5d
 8002ad0:	08002b5d 	.word	0x08002b5d
 8002ad4:	08002b4b 	.word	0x08002b4b
 8002ad8:	08002b5d 	.word	0x08002b5d
 8002adc:	08002b5d 	.word	0x08002b5d
 8002ae0:	08002b5d 	.word	0x08002b5d
 8002ae4:	08002b5d 	.word	0x08002b5d
 8002ae8:	08002b5d 	.word	0x08002b5d
 8002aec:	08002b5d 	.word	0x08002b5d
 8002af0:	08002b5d 	.word	0x08002b5d
 8002af4:	08002b63 	.word	0x08002b63
 8002af8:	08002b5d 	.word	0x08002b5d
 8002afc:	08002b5d 	.word	0x08002b5d
 8002b00:	08002b5d 	.word	0x08002b5d
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002b5d 	.word	0x08002b5d
 8002b0c:	08002b5d 	.word	0x08002b5d
 8002b10:	08002b5d 	.word	0x08002b5d
 8002b14:	08002b63 	.word	0x08002b63
 8002b18:	08002b5d 	.word	0x08002b5d
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002b5d 	.word	0x08002b5d
 8002b24:	08002b5d 	.word	0x08002b5d
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002b63 	.word	0x08002b63
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fdfa 	bl	8003738 <RCCEx_PLL2_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b48:	e00c      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3324      	adds	r3, #36	; 0x24
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fea3 	bl	800389c <RCCEx_PLL3_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b5a:	e003      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b60:	e000      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8002b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b76:	4914      	ldr	r1, [pc, #80]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	654b      	str	r3, [r1, #84]	; 0x54
 8002b7c:	e001      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03e      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d827      	bhi.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002b96:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bed 	.word	0x08002bed
 8002ba0:	08002bb5 	.word	0x08002bb5
 8002ba4:	08002bd5 	.word	0x08002bd5
 8002ba8:	08002bed 	.word	0x08002bed
 8002bac:	08002bed 	.word	0x08002bed
 8002bb0:	08002bed 	.word	0x08002bed
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fdbc 	bl	8003738 <RCCEx_PLL2_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bc4:	e013      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	58024800 	.word	0x58024800
 8002bd0:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3324      	adds	r3, #36	; 0x24
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fe5e 	bl	800389c <RCCEx_PLL3_Config>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bea:	e000      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bf4:	4b9f      	ldr	r3, [pc, #636]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f023 0207 	bic.w	r2, r3, #7
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c00:	499c      	ldr	r1, [pc, #624]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	654b      	str	r3, [r1, #84]	; 0x54
 8002c06:	e001      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d039      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d820      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c6b 	.word	0x08002c6b
 8002c2c:	08002c41 	.word	0x08002c41
 8002c30:	08002c53 	.word	0x08002c53
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c6b 	.word	0x08002c6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fd76 	bl	8003738 <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c50:	e00c      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3324      	adds	r3, #36	; 0x24
 8002c56:	2101      	movs	r1, #1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fe1f 	bl	800389c <RCCEx_PLL3_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c62:	e003      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	75fb      	strb	r3, [r7, #23]
      break;
 8002c68:	e000      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8002c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c72:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f023 0207 	bic.w	r2, r3, #7
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	497c      	ldr	r1, [pc, #496]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	658b      	str	r3, [r1, #88]	; 0x58
 8002c86:	e001      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d04b      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca2:	d02e      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca8:	d828      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d02a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d822      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002cb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cba:	d026      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002cbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cc0:	d81c      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc6:	d010      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ccc:	d816      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01d      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8002cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd6:	d111      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fd2a 	bl	8003738 <RCCEx_PLL2_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ce8:	e012      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3324      	adds	r3, #36	; 0x24
 8002cee:	2102      	movs	r1, #2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fdd3 	bl	800389c <RCCEx_PLL3_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002cfa:	e009      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002d00:	e006      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002d02:	bf00      	nop
 8002d04:	e004      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d16:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	4953      	ldr	r1, [pc, #332]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	654b      	str	r3, [r1, #84]	; 0x54
 8002d2a:	e001      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d04b      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d46:	d02e      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002d48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d4c:	d828      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	d02a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xace>
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d58:	d822      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002d5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d5e:	d026      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8002d60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d64:	d81c      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d70:	d816      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01d      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d111      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fcd8 	bl	8003738 <RCCEx_PLL2_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d8c:	e012      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3324      	adds	r3, #36	; 0x24
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fd81 	bl	800389c <RCCEx_PLL3_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	75fb      	strb	r3, [r7, #23]
      break;
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e004      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc8:	492a      	ldr	r1, [pc, #168]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	658b      	str	r3, [r1, #88]	; 0x58
 8002dce:	e001      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d04d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002de6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002dea:	d02e      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8002dec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002df0:	d828      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df6:	d02a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	d822      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002dfe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e02:	d026      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8002e04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e08:	d81c      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8002e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e14:	d816      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01d      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc86 	bl	8003738 <RCCEx_PLL2_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e30:	e012      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3324      	adds	r3, #36	; 0x24
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fd2f 	bl	800389c <RCCEx_PLL3_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e42:	e009      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
      break;
 8002e48:	e006      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e004      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e002      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e6c:	4901      	ldr	r1, [pc, #4]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	658b      	str	r3, [r1, #88]	; 0x58
 8002e72:	e003      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002e74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e92:	d10a      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3324      	adds	r3, #36	; 0x24
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fcfe 	bl	800389c <RCCEx_PLL3_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002eaa:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb8:	4988      	ldr	r1, [pc, #544]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed4:	d10a      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3324      	adds	r3, #36	; 0x24
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fcdd 	bl	800389c <RCCEx_PLL3_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eec:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002efa:	4978      	ldr	r1, [pc, #480]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d034      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f16:	d01d      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f1c:	d817      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f26:	d009      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8002f28:	e011      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fc01 	bl	8003738 <RCCEx_PLL2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3324      	adds	r3, #36	; 0x24
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fcaa 	bl	800389c <RCCEx_PLL3_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8002f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f5c:	4b5f      	ldr	r3, [pc, #380]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f6a:	495c      	ldr	r1, [pc, #368]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	658b      	str	r3, [r1, #88]	; 0x58
 8002f70:	e001      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d033      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f8c:	d01c      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8002f8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f92:	d816      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8002f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8002f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9e:	d007      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8002fa0:	e00f      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa2:	4b4e      	ldr	r3, [pc, #312]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	4a4d      	ldr	r2, [pc, #308]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fae:	e00c      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3324      	adds	r3, #36	; 0x24
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fc70 	bl	800389c <RCCEx_PLL3_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fc0:	e003      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8002fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd0:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	493f      	ldr	r1, [pc, #252]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	654b      	str	r3, [r1, #84]	; 0x54
 8002fe4:	e001      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d029      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003002:	d007      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003004:	e00f      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003006:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4a34      	ldr	r2, [pc, #208]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003012:	e00b      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2102      	movs	r1, #2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fb8c 	bl	8003738 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003024:	e002      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
      break;
 800302a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003040:	4313      	orrs	r3, r2
 8003042:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003044:	e001      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3324      	adds	r3, #36	; 0x24
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fc1d 	bl	800389c <RCCEx_PLL3_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d035      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003082:	d017      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003088:	d811      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800308a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308e:	d013      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003094:	d80b      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800309a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309e:	d106      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80030ac:	e007      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
      break;
 80030b2:	e004      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80030b4:	bf00      	nop
 80030b6:	e002      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80030bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10d      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	4902      	ldr	r1, [pc, #8]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	654b      	str	r3, [r1, #84]	; 0x54
 80030d8:	e004      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80030da:	bf00      	nop
 80030dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	492e      	ldr	r1, [pc, #184]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800311c:	4926      	ldr	r1, [pc, #152]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003132:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313a:	491f      	ldr	r1, [pc, #124]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800313c:	4313      	orrs	r3, r2
 800313e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003152:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003156:	6113      	str	r3, [r2, #16]
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003162:	4915      	ldr	r1, [pc, #84]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	da08      	bge.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003174:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	490e      	ldr	r1, [pc, #56]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319c:	4906      	ldr	r1, [pc, #24]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80031a2:	7dbb      	ldrb	r3, [r7, #22]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	58024400 	.word	0x58024400

080031bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80031c0:	f7ff f830 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58024400 	.word	0x58024400
 80031e4:	08004be4 	.word	0x08004be4

080031e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031f0:	4ba1      	ldr	r3, [pc, #644]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80031fa:	4b9f      	ldr	r3, [pc, #636]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	0b1b      	lsrs	r3, r3, #12
 8003200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003204:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003206:	4b9c      	ldr	r3, [pc, #624]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003212:	4b99      	ldr	r3, [pc, #612]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8111 	beq.w	8003458 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f000 8083 	beq.w	8003344 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b02      	cmp	r3, #2
 8003242:	f200 80a1 	bhi.w	8003388 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d056      	beq.n	8003300 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003252:	e099      	b.n	8003388 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02d      	beq.n	80032bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003260:	4b85      	ldr	r3, [pc, #532]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a84      	ldr	r2, [pc, #528]	; (800347c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328a:	4b7b      	ldr	r3, [pc, #492]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329a:	ed97 6a03 	vldr	s12, [r7, #12]
 800329e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80032ba:	e087      	b.n	80033cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003484 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a03 	vldr	s12, [r7, #12]
 80032e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032fe:	e065      	b.n	80033cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b59      	ldr	r3, [pc, #356]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a03 	vldr	s12, [r7, #12]
 8003326:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003342:	e043      	b.n	80033cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800348c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b48      	ldr	r3, [pc, #288]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a03 	vldr	s12, [r7, #12]
 800336a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003386:	e021      	b.n	80033cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80033cc:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	0a5b      	lsrs	r3, r3, #9
 80033d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80033e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80033ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f2:	ee17 2a90 	vmov	r2, s15
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003414:	edd7 6a07 	vldr	s13, [r7, #28]
 8003418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003420:	ee17 2a90 	vmov	r2, s15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	0e1b      	lsrs	r3, r3, #24
 800342e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800343e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003442:	edd7 6a07 	vldr	s13, [r7, #28]
 8003446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344e:	ee17 2a90 	vmov	r2, s15
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003456:	e008      	b.n	800346a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	bf00      	nop
 800346c:	3724      	adds	r7, #36	; 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400
 800347c:	03d09000 	.word	0x03d09000
 8003480:	46000000 	.word	0x46000000
 8003484:	4c742400 	.word	0x4c742400
 8003488:	4a742400 	.word	0x4a742400
 800348c:	4bbebc20 	.word	0x4bbebc20

08003490 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003498:	4ba1      	ldr	r3, [pc, #644]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80034a2:	4b9f      	ldr	r3, [pc, #636]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	0d1b      	lsrs	r3, r3, #20
 80034a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80034ae:	4b9c      	ldr	r3, [pc, #624]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80034ba:	4b99      	ldr	r3, [pc, #612]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8111 	beq.w	8003700 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	f000 8083 	beq.w	80035ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	f200 80a1 	bhi.w	8003630 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d056      	beq.n	80035a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80034fa:	e099      	b.n	8003630 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034fc:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02d      	beq.n	8003564 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003508:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	08db      	lsrs	r3, r3, #3
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	4a84      	ldr	r2, [pc, #528]	; (8003724 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003532:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003542:	ed97 6a03 	vldr	s12, [r7, #12]
 8003546:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800354a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003562:	e087      	b.n	8003674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800372c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003576:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003586:	ed97 6a03 	vldr	s12, [r7, #12]
 800358a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800358e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035a6:	e065      	b.n	8003674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80035b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ba:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80035ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035ea:	e043      	b.n	8003674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80035fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fe:	4b48      	ldr	r3, [pc, #288]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003612:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800362e:	e021      	b.n	8003674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800363e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003642:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003652:	ed97 6a03 	vldr	s12, [r7, #12]
 8003656:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800365a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800365e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003672:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	0a5b      	lsrs	r3, r3, #9
 800367a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800368a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800368e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369a:	ee17 2a90 	vmov	r2, s15
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80036a2:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c8:	ee17 2a90 	vmov	r2, s15
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	0e1b      	lsrs	r3, r3, #24
 80036d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f6:	ee17 2a90 	vmov	r2, s15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80036fe:	e008      	b.n	8003712 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
}
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	58024400 	.word	0x58024400
 8003724:	03d09000 	.word	0x03d09000
 8003728:	46000000 	.word	0x46000000
 800372c:	4c742400 	.word	0x4c742400
 8003730:	4a742400 	.word	0x4a742400
 8003734:	4bbebc20 	.word	0x4bbebc20

08003738 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003746:	4b53      	ldr	r3, [pc, #332]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b03      	cmp	r3, #3
 8003750:	d101      	bne.n	8003756 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e099      	b.n	800388a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003756:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4e      	ldr	r2, [pc, #312]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800375c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003762:	f7fd fa93 	bl	8000c8c <HAL_GetTick>
 8003766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003768:	e008      	b.n	800377c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800376a:	f7fd fa8f 	bl	8000c8c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e086      	b.n	800388a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800377c:	4b45      	ldr	r3, [pc, #276]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003788:	4b42      	ldr	r3, [pc, #264]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	031b      	lsls	r3, r3, #12
 8003796:	493f      	ldr	r1, [pc, #252]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	628b      	str	r3, [r1, #40]	; 0x28
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	025b      	lsls	r3, r3, #9
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037cc:	4931      	ldr	r1, [pc, #196]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	492d      	ldr	r1, [pc, #180]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f023 0220 	bic.w	r2, r3, #32
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	4928      	ldr	r1, [pc, #160]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4a26      	ldr	r2, [pc, #152]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 80037fc:	f023 0310 	bic.w	r3, r3, #16
 8003800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <RCCEx_PLL2_Config+0x160>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	69d2      	ldr	r2, [r2, #28]
 800380e:	00d2      	lsls	r2, r2, #3
 8003810:	4920      	ldr	r1, [pc, #128]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003816:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800381c:	f043 0310 	orr.w	r3, r3, #16
 8003820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800382e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003834:	e00f      	b.n	8003856 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d106      	bne.n	800384a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003848:	e005      	b.n	8003856 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	4a11      	ldr	r2, [pc, #68]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003854:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800385c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003862:	f7fd fa13 	bl	8000c8c <HAL_GetTick>
 8003866:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003868:	e008      	b.n	800387c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800386a:	f7fd fa0f 	bl	8000c8c <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e006      	b.n	800388a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <RCCEx_PLL2_Config+0x15c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	58024400 	.word	0x58024400
 8003898:	ffff0007 	.word	0xffff0007

0800389c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d101      	bne.n	80038ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e099      	b.n	80039ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80038ba:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4e      	ldr	r2, [pc, #312]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80038c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c6:	f7fd f9e1 	bl	8000c8c <HAL_GetTick>
 80038ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038ce:	f7fd f9dd 	bl	8000c8c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e086      	b.n	80039ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038e0:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80038ec:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	051b      	lsls	r3, r3, #20
 80038fa:	493f      	ldr	r1, [pc, #252]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	628b      	str	r3, [r1, #40]	; 0x28
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	3b01      	subs	r3, #1
 8003906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	3b01      	subs	r3, #1
 8003910:	025b      	lsls	r3, r3, #9
 8003912:	b29b      	uxth	r3, r3
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	3b01      	subs	r3, #1
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	3b01      	subs	r3, #1
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003930:	4931      	ldr	r1, [pc, #196]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003936:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	492d      	ldr	r1, [pc, #180]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	4928      	ldr	r1, [pc, #160]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396a:	4b24      	ldr	r3, [pc, #144]	; (80039fc <RCCEx_PLL3_Config+0x160>)
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	69d2      	ldr	r2, [r2, #28]
 8003972:	00d2      	lsls	r2, r2, #3
 8003974:	4920      	ldr	r1, [pc, #128]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 8003992:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003998:	e00f      	b.n	80039ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80039a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039ac:	e005      	b.n	80039ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80039b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c6:	f7fd f961 	bl	8000c8c <HAL_GetTick>
 80039ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039ce:	f7fd f95d 	bl	8000c8c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <RCCEx_PLL3_Config+0x15c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
 80039fc:	ffff0007 	.word	0xffff0007

08003a00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e042      	b.n	8003a98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fc fff3 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2224      	movs	r2, #36	; 0x24
 8003a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8c2 	bl	8003bcc <UART_SetConfig>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e022      	b.n	8003a98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fe16 	bl	800468c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fe9d 	bl	80047d0 <UART_CheckIdleState>
 8003a96:	4603      	mov	r3, r0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	f040 8083 	bne.w	8003bc2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_Transmit+0x28>
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e07b      	b.n	8003bc4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Transmit+0x3a>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e074      	b.n	8003bc4 <HAL_UART_Transmit+0x124>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2221      	movs	r2, #33	; 0x21
 8003aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af2:	f7fd f8cb 	bl	8000c8c <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b10:	d108      	bne.n	8003b24 <HAL_UART_Transmit+0x84>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e003      	b.n	8003b2c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b34:	e02c      	b.n	8003b90 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fe90 	bl	8004866 <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e039      	b.n	8003bc4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e007      	b.n	8003b7e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1cc      	bne.n	8003b36 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2140      	movs	r1, #64	; 0x40
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fe5d 	bl	8004866 <UART_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e006      	b.n	8003bc4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b08e      	sub	sp, #56	; 0x38
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4bbf      	ldr	r3, [pc, #764]	; (8003ef8 <UART_SetConfig+0x32c>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c02:	430b      	orrs	r3, r1
 8003c04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4ab5      	ldr	r2, [pc, #724]	; (8003efc <UART_SetConfig+0x330>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c32:	4313      	orrs	r3, r2
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4bb0      	ldr	r3, [pc, #704]	; (8003f00 <UART_SetConfig+0x334>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f023 010f 	bic.w	r1, r3, #15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4aa7      	ldr	r2, [pc, #668]	; (8003f04 <UART_SetConfig+0x338>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d176      	bne.n	8003d58 <UART_SetConfig+0x18c>
 8003c6a:	4ba7      	ldr	r3, [pc, #668]	; (8003f08 <UART_SetConfig+0x33c>)
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c72:	2b28      	cmp	r3, #40	; 0x28
 8003c74:	d86c      	bhi.n	8003d50 <UART_SetConfig+0x184>
 8003c76:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <UART_SetConfig+0xb0>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003d21 	.word	0x08003d21
 8003c80:	08003d51 	.word	0x08003d51
 8003c84:	08003d51 	.word	0x08003d51
 8003c88:	08003d51 	.word	0x08003d51
 8003c8c:	08003d51 	.word	0x08003d51
 8003c90:	08003d51 	.word	0x08003d51
 8003c94:	08003d51 	.word	0x08003d51
 8003c98:	08003d51 	.word	0x08003d51
 8003c9c:	08003d29 	.word	0x08003d29
 8003ca0:	08003d51 	.word	0x08003d51
 8003ca4:	08003d51 	.word	0x08003d51
 8003ca8:	08003d51 	.word	0x08003d51
 8003cac:	08003d51 	.word	0x08003d51
 8003cb0:	08003d51 	.word	0x08003d51
 8003cb4:	08003d51 	.word	0x08003d51
 8003cb8:	08003d51 	.word	0x08003d51
 8003cbc:	08003d31 	.word	0x08003d31
 8003cc0:	08003d51 	.word	0x08003d51
 8003cc4:	08003d51 	.word	0x08003d51
 8003cc8:	08003d51 	.word	0x08003d51
 8003ccc:	08003d51 	.word	0x08003d51
 8003cd0:	08003d51 	.word	0x08003d51
 8003cd4:	08003d51 	.word	0x08003d51
 8003cd8:	08003d51 	.word	0x08003d51
 8003cdc:	08003d39 	.word	0x08003d39
 8003ce0:	08003d51 	.word	0x08003d51
 8003ce4:	08003d51 	.word	0x08003d51
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003d51 	.word	0x08003d51
 8003cf0:	08003d51 	.word	0x08003d51
 8003cf4:	08003d51 	.word	0x08003d51
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	08003d41 	.word	0x08003d41
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d51 	.word	0x08003d51
 8003d08:	08003d51 	.word	0x08003d51
 8003d0c:	08003d51 	.word	0x08003d51
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d51 	.word	0x08003d51
 8003d18:	08003d51 	.word	0x08003d51
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d26:	e222      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d2e:	e21e      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d30:	2308      	movs	r3, #8
 8003d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d36:	e21a      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d3e:	e216      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d40:	2320      	movs	r3, #32
 8003d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d46:	e212      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d4e:	e20e      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d56:	e20a      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a6b      	ldr	r2, [pc, #428]	; (8003f0c <UART_SetConfig+0x340>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d130      	bne.n	8003dc4 <UART_SetConfig+0x1f8>
 8003d62:	4b69      	ldr	r3, [pc, #420]	; (8003f08 <UART_SetConfig+0x33c>)
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d826      	bhi.n	8003dbc <UART_SetConfig+0x1f0>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <UART_SetConfig+0x1a8>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d8d 	.word	0x08003d8d
 8003d78:	08003d95 	.word	0x08003d95
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d92:	e1ec      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d9a:	e1e8      	b.n	800416e <UART_SetConfig+0x5a2>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003da2:	e1e4      	b.n	800416e <UART_SetConfig+0x5a2>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003daa:	e1e0      	b.n	800416e <UART_SetConfig+0x5a2>
 8003dac:	2320      	movs	r3, #32
 8003dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003db2:	e1dc      	b.n	800416e <UART_SetConfig+0x5a2>
 8003db4:	2340      	movs	r3, #64	; 0x40
 8003db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dba:	e1d8      	b.n	800416e <UART_SetConfig+0x5a2>
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dc2:	e1d4      	b.n	800416e <UART_SetConfig+0x5a2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a51      	ldr	r2, [pc, #324]	; (8003f10 <UART_SetConfig+0x344>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d130      	bne.n	8003e30 <UART_SetConfig+0x264>
 8003dce:	4b4e      	ldr	r3, [pc, #312]	; (8003f08 <UART_SetConfig+0x33c>)
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d826      	bhi.n	8003e28 <UART_SetConfig+0x25c>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x214>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df9 	.word	0x08003df9
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003e09 	.word	0x08003e09
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dfe:	e1b6      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e06:	e1b2      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e0e:	e1ae      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e16:	e1aa      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e18:	2320      	movs	r3, #32
 8003e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e1e:	e1a6      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e20:	2340      	movs	r3, #64	; 0x40
 8003e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e26:	e1a2      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e2e:	e19e      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a37      	ldr	r2, [pc, #220]	; (8003f14 <UART_SetConfig+0x348>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d130      	bne.n	8003e9c <UART_SetConfig+0x2d0>
 8003e3a:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <UART_SetConfig+0x33c>)
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d826      	bhi.n	8003e94 <UART_SetConfig+0x2c8>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x280>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e65 	.word	0x08003e65
 8003e50:	08003e6d 	.word	0x08003e6d
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e6a:	e180      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e72:	e17c      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e7a:	e178      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e82:	e174      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e84:	2320      	movs	r3, #32
 8003e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e8a:	e170      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e8c:	2340      	movs	r3, #64	; 0x40
 8003e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e92:	e16c      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e9a:	e168      	b.n	800416e <UART_SetConfig+0x5a2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <UART_SetConfig+0x34c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d142      	bne.n	8003f2c <UART_SetConfig+0x360>
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <UART_SetConfig+0x33c>)
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d838      	bhi.n	8003f24 <UART_SetConfig+0x358>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <UART_SetConfig+0x2ec>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ed1 	.word	0x08003ed1
 8003ebc:	08003ed9 	.word	0x08003ed9
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003f1d 	.word	0x08003f1d
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ed6:	e14a      	b.n	800416e <UART_SetConfig+0x5a2>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ede:	e146      	b.n	800416e <UART_SetConfig+0x5a2>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ee6:	e142      	b.n	800416e <UART_SetConfig+0x5a2>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eee:	e13e      	b.n	800416e <UART_SetConfig+0x5a2>
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ef6:	e13a      	b.n	800416e <UART_SetConfig+0x5a2>
 8003ef8:	cfff69f3 	.word	0xcfff69f3
 8003efc:	58000c00 	.word	0x58000c00
 8003f00:	11fff4ff 	.word	0x11fff4ff
 8003f04:	40011000 	.word	0x40011000
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	40004400 	.word	0x40004400
 8003f10:	40004800 	.word	0x40004800
 8003f14:	40004c00 	.word	0x40004c00
 8003f18:	40005000 	.word	0x40005000
 8003f1c:	2340      	movs	r3, #64	; 0x40
 8003f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f22:	e124      	b.n	800416e <UART_SetConfig+0x5a2>
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f2a:	e120      	b.n	800416e <UART_SetConfig+0x5a2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4acc      	ldr	r2, [pc, #816]	; (8004264 <UART_SetConfig+0x698>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d176      	bne.n	8004024 <UART_SetConfig+0x458>
 8003f36:	4bcc      	ldr	r3, [pc, #816]	; (8004268 <UART_SetConfig+0x69c>)
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f3e:	2b28      	cmp	r3, #40	; 0x28
 8003f40:	d86c      	bhi.n	800401c <UART_SetConfig+0x450>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x37c>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003fed 	.word	0x08003fed
 8003f4c:	0800401d 	.word	0x0800401d
 8003f50:	0800401d 	.word	0x0800401d
 8003f54:	0800401d 	.word	0x0800401d
 8003f58:	0800401d 	.word	0x0800401d
 8003f5c:	0800401d 	.word	0x0800401d
 8003f60:	0800401d 	.word	0x0800401d
 8003f64:	0800401d 	.word	0x0800401d
 8003f68:	08003ff5 	.word	0x08003ff5
 8003f6c:	0800401d 	.word	0x0800401d
 8003f70:	0800401d 	.word	0x0800401d
 8003f74:	0800401d 	.word	0x0800401d
 8003f78:	0800401d 	.word	0x0800401d
 8003f7c:	0800401d 	.word	0x0800401d
 8003f80:	0800401d 	.word	0x0800401d
 8003f84:	0800401d 	.word	0x0800401d
 8003f88:	08003ffd 	.word	0x08003ffd
 8003f8c:	0800401d 	.word	0x0800401d
 8003f90:	0800401d 	.word	0x0800401d
 8003f94:	0800401d 	.word	0x0800401d
 8003f98:	0800401d 	.word	0x0800401d
 8003f9c:	0800401d 	.word	0x0800401d
 8003fa0:	0800401d 	.word	0x0800401d
 8003fa4:	0800401d 	.word	0x0800401d
 8003fa8:	08004005 	.word	0x08004005
 8003fac:	0800401d 	.word	0x0800401d
 8003fb0:	0800401d 	.word	0x0800401d
 8003fb4:	0800401d 	.word	0x0800401d
 8003fb8:	0800401d 	.word	0x0800401d
 8003fbc:	0800401d 	.word	0x0800401d
 8003fc0:	0800401d 	.word	0x0800401d
 8003fc4:	0800401d 	.word	0x0800401d
 8003fc8:	0800400d 	.word	0x0800400d
 8003fcc:	0800401d 	.word	0x0800401d
 8003fd0:	0800401d 	.word	0x0800401d
 8003fd4:	0800401d 	.word	0x0800401d
 8003fd8:	0800401d 	.word	0x0800401d
 8003fdc:	0800401d 	.word	0x0800401d
 8003fe0:	0800401d 	.word	0x0800401d
 8003fe4:	0800401d 	.word	0x0800401d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ff2:	e0bc      	b.n	800416e <UART_SetConfig+0x5a2>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffa:	e0b8      	b.n	800416e <UART_SetConfig+0x5a2>
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004002:	e0b4      	b.n	800416e <UART_SetConfig+0x5a2>
 8004004:	2310      	movs	r3, #16
 8004006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800400a:	e0b0      	b.n	800416e <UART_SetConfig+0x5a2>
 800400c:	2320      	movs	r3, #32
 800400e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004012:	e0ac      	b.n	800416e <UART_SetConfig+0x5a2>
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800401a:	e0a8      	b.n	800416e <UART_SetConfig+0x5a2>
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004022:	e0a4      	b.n	800416e <UART_SetConfig+0x5a2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a90      	ldr	r2, [pc, #576]	; (800426c <UART_SetConfig+0x6a0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d130      	bne.n	8004090 <UART_SetConfig+0x4c4>
 800402e:	4b8e      	ldr	r3, [pc, #568]	; (8004268 <UART_SetConfig+0x69c>)
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	2b05      	cmp	r3, #5
 8004038:	d826      	bhi.n	8004088 <UART_SetConfig+0x4bc>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0x474>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004059 	.word	0x08004059
 8004044:	08004061 	.word	0x08004061
 8004048:	08004069 	.word	0x08004069
 800404c:	08004071 	.word	0x08004071
 8004050:	08004079 	.word	0x08004079
 8004054:	08004081 	.word	0x08004081
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405e:	e086      	b.n	800416e <UART_SetConfig+0x5a2>
 8004060:	2304      	movs	r3, #4
 8004062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004066:	e082      	b.n	800416e <UART_SetConfig+0x5a2>
 8004068:	2308      	movs	r3, #8
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406e:	e07e      	b.n	800416e <UART_SetConfig+0x5a2>
 8004070:	2310      	movs	r3, #16
 8004072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004076:	e07a      	b.n	800416e <UART_SetConfig+0x5a2>
 8004078:	2320      	movs	r3, #32
 800407a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800407e:	e076      	b.n	800416e <UART_SetConfig+0x5a2>
 8004080:	2340      	movs	r3, #64	; 0x40
 8004082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004086:	e072      	b.n	800416e <UART_SetConfig+0x5a2>
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800408e:	e06e      	b.n	800416e <UART_SetConfig+0x5a2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a76      	ldr	r2, [pc, #472]	; (8004270 <UART_SetConfig+0x6a4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d130      	bne.n	80040fc <UART_SetConfig+0x530>
 800409a:	4b73      	ldr	r3, [pc, #460]	; (8004268 <UART_SetConfig+0x69c>)
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d826      	bhi.n	80040f4 <UART_SetConfig+0x528>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0x4e0>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040c5 	.word	0x080040c5
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	080040d5 	.word	0x080040d5
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e050      	b.n	800416e <UART_SetConfig+0x5a2>
 80040cc:	2304      	movs	r3, #4
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d2:	e04c      	b.n	800416e <UART_SetConfig+0x5a2>
 80040d4:	2308      	movs	r3, #8
 80040d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040da:	e048      	b.n	800416e <UART_SetConfig+0x5a2>
 80040dc:	2310      	movs	r3, #16
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e044      	b.n	800416e <UART_SetConfig+0x5a2>
 80040e4:	2320      	movs	r3, #32
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ea:	e040      	b.n	800416e <UART_SetConfig+0x5a2>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f2:	e03c      	b.n	800416e <UART_SetConfig+0x5a2>
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fa:	e038      	b.n	800416e <UART_SetConfig+0x5a2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a5c      	ldr	r2, [pc, #368]	; (8004274 <UART_SetConfig+0x6a8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d130      	bne.n	8004168 <UART_SetConfig+0x59c>
 8004106:	4b58      	ldr	r3, [pc, #352]	; (8004268 <UART_SetConfig+0x69c>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b05      	cmp	r3, #5
 8004110:	d826      	bhi.n	8004160 <UART_SetConfig+0x594>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x54c>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004131 	.word	0x08004131
 800411c:	08004139 	.word	0x08004139
 8004120:	08004141 	.word	0x08004141
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	2302      	movs	r3, #2
 8004132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004136:	e01a      	b.n	800416e <UART_SetConfig+0x5a2>
 8004138:	2304      	movs	r3, #4
 800413a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413e:	e016      	b.n	800416e <UART_SetConfig+0x5a2>
 8004140:	2308      	movs	r3, #8
 8004142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004146:	e012      	b.n	800416e <UART_SetConfig+0x5a2>
 8004148:	2310      	movs	r3, #16
 800414a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414e:	e00e      	b.n	800416e <UART_SetConfig+0x5a2>
 8004150:	2320      	movs	r3, #32
 8004152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004156:	e00a      	b.n	800416e <UART_SetConfig+0x5a2>
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415e:	e006      	b.n	800416e <UART_SetConfig+0x5a2>
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004166:	e002      	b.n	800416e <UART_SetConfig+0x5a2>
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a40      	ldr	r2, [pc, #256]	; (8004274 <UART_SetConfig+0x6a8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	f040 80ef 	bne.w	8004358 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800417a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800417e:	2b20      	cmp	r3, #32
 8004180:	dc46      	bgt.n	8004210 <UART_SetConfig+0x644>
 8004182:	2b02      	cmp	r3, #2
 8004184:	f2c0 8081 	blt.w	800428a <UART_SetConfig+0x6be>
 8004188:	3b02      	subs	r3, #2
 800418a:	2b1e      	cmp	r3, #30
 800418c:	d87d      	bhi.n	800428a <UART_SetConfig+0x6be>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0x5c8>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	08004217 	.word	0x08004217
 8004198:	0800428b 	.word	0x0800428b
 800419c:	0800421f 	.word	0x0800421f
 80041a0:	0800428b 	.word	0x0800428b
 80041a4:	0800428b 	.word	0x0800428b
 80041a8:	0800428b 	.word	0x0800428b
 80041ac:	0800422f 	.word	0x0800422f
 80041b0:	0800428b 	.word	0x0800428b
 80041b4:	0800428b 	.word	0x0800428b
 80041b8:	0800428b 	.word	0x0800428b
 80041bc:	0800428b 	.word	0x0800428b
 80041c0:	0800428b 	.word	0x0800428b
 80041c4:	0800428b 	.word	0x0800428b
 80041c8:	0800428b 	.word	0x0800428b
 80041cc:	0800423f 	.word	0x0800423f
 80041d0:	0800428b 	.word	0x0800428b
 80041d4:	0800428b 	.word	0x0800428b
 80041d8:	0800428b 	.word	0x0800428b
 80041dc:	0800428b 	.word	0x0800428b
 80041e0:	0800428b 	.word	0x0800428b
 80041e4:	0800428b 	.word	0x0800428b
 80041e8:	0800428b 	.word	0x0800428b
 80041ec:	0800428b 	.word	0x0800428b
 80041f0:	0800428b 	.word	0x0800428b
 80041f4:	0800428b 	.word	0x0800428b
 80041f8:	0800428b 	.word	0x0800428b
 80041fc:	0800428b 	.word	0x0800428b
 8004200:	0800428b 	.word	0x0800428b
 8004204:	0800428b 	.word	0x0800428b
 8004208:	0800428b 	.word	0x0800428b
 800420c:	0800427d 	.word	0x0800427d
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d036      	beq.n	8004282 <UART_SetConfig+0x6b6>
 8004214:	e039      	b.n	800428a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004216:	f7fe ffd1 	bl	80031bc <HAL_RCCEx_GetD3PCLK1Freq>
 800421a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800421c:	e03b      	b.n	8004296 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe ffe0 	bl	80031e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800422c:	e033      	b.n	8004296 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800422e:	f107 0308 	add.w	r3, r7, #8
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff f92c 	bl	8003490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800423c:	e02b      	b.n	8004296 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <UART_SetConfig+0x69c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <UART_SetConfig+0x69c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	4a08      	ldr	r2, [pc, #32]	; (8004278 <UART_SetConfig+0x6ac>)
 8004256:	fa22 f303 	lsr.w	r3, r2, r3
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800425c:	e01b      	b.n	8004296 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <UART_SetConfig+0x6ac>)
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004262:	e018      	b.n	8004296 <UART_SetConfig+0x6ca>
 8004264:	40011400 	.word	0x40011400
 8004268:	58024400 	.word	0x58024400
 800426c:	40007800 	.word	0x40007800
 8004270:	40007c00 	.word	0x40007c00
 8004274:	58000c00 	.word	0x58000c00
 8004278:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800427c:	4bc4      	ldr	r3, [pc, #784]	; (8004590 <UART_SetConfig+0x9c4>)
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004280:	e009      	b.n	8004296 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004288:	e005      	b.n	8004296 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004294:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 81da 	beq.w	8004652 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	4abc      	ldr	r2, [pc, #752]	; (8004594 <UART_SetConfig+0x9c8>)
 80042a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4413      	add	r3, r2
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d305      	bcc.n	80042ce <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042c8:	6a3a      	ldr	r2, [r7, #32]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d903      	bls.n	80042d6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80042d4:	e1bd      	b.n	8004652 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	4618      	mov	r0, r3
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	4aac      	ldr	r2, [pc, #688]	; (8004594 <UART_SetConfig+0x9c8>)
 80042e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	f7fb fff3 	bl	80002d8 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	020b      	lsls	r3, r1, #8
 8004304:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004308:	0202      	lsls	r2, r0, #8
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	6849      	ldr	r1, [r1, #4]
 800430e:	0849      	lsrs	r1, r1, #1
 8004310:	4608      	mov	r0, r1
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	1814      	adds	r4, r2, r0
 8004318:	eb43 0501 	adc.w	r5, r3, r1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	461a      	mov	r2, r3
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	4620      	mov	r0, r4
 8004328:	4629      	mov	r1, r5
 800432a:	f7fb ffd5 	bl	80002d8 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4613      	mov	r3, r2
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433c:	d308      	bcc.n	8004350 <UART_SetConfig+0x784>
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004344:	d204      	bcs.n	8004350 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	e180      	b.n	8004652 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004356:	e17c      	b.n	8004652 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004360:	f040 80bf 	bne.w	80044e2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8004364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004368:	2b20      	cmp	r3, #32
 800436a:	dc49      	bgt.n	8004400 <UART_SetConfig+0x834>
 800436c:	2b00      	cmp	r3, #0
 800436e:	db7c      	blt.n	800446a <UART_SetConfig+0x89e>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d87a      	bhi.n	800446a <UART_SetConfig+0x89e>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x7b0>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	08004407 	.word	0x08004407
 8004380:	0800440f 	.word	0x0800440f
 8004384:	0800446b 	.word	0x0800446b
 8004388:	0800446b 	.word	0x0800446b
 800438c:	08004417 	.word	0x08004417
 8004390:	0800446b 	.word	0x0800446b
 8004394:	0800446b 	.word	0x0800446b
 8004398:	0800446b 	.word	0x0800446b
 800439c:	08004427 	.word	0x08004427
 80043a0:	0800446b 	.word	0x0800446b
 80043a4:	0800446b 	.word	0x0800446b
 80043a8:	0800446b 	.word	0x0800446b
 80043ac:	0800446b 	.word	0x0800446b
 80043b0:	0800446b 	.word	0x0800446b
 80043b4:	0800446b 	.word	0x0800446b
 80043b8:	0800446b 	.word	0x0800446b
 80043bc:	08004437 	.word	0x08004437
 80043c0:	0800446b 	.word	0x0800446b
 80043c4:	0800446b 	.word	0x0800446b
 80043c8:	0800446b 	.word	0x0800446b
 80043cc:	0800446b 	.word	0x0800446b
 80043d0:	0800446b 	.word	0x0800446b
 80043d4:	0800446b 	.word	0x0800446b
 80043d8:	0800446b 	.word	0x0800446b
 80043dc:	0800446b 	.word	0x0800446b
 80043e0:	0800446b 	.word	0x0800446b
 80043e4:	0800446b 	.word	0x0800446b
 80043e8:	0800446b 	.word	0x0800446b
 80043ec:	0800446b 	.word	0x0800446b
 80043f0:	0800446b 	.word	0x0800446b
 80043f4:	0800446b 	.word	0x0800446b
 80043f8:	0800446b 	.word	0x0800446b
 80043fc:	0800445d 	.word	0x0800445d
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d02e      	beq.n	8004462 <UART_SetConfig+0x896>
 8004404:	e031      	b.n	800446a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004406:	f7fd ff3d 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 800440a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800440c:	e033      	b.n	8004476 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440e:	f7fd ff4f 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 8004412:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004414:	e02f      	b.n	8004476 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fee4 	bl	80031e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004424:	e027      	b.n	8004476 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004426:	f107 0308 	add.w	r3, r7, #8
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f830 	bl	8003490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004434:	e01f      	b.n	8004476 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <UART_SetConfig+0x9cc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004442:	4b55      	ldr	r3, [pc, #340]	; (8004598 <UART_SetConfig+0x9cc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	4a53      	ldr	r2, [pc, #332]	; (800459c <UART_SetConfig+0x9d0>)
 800444e:	fa22 f303 	lsr.w	r3, r2, r3
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004454:	e00f      	b.n	8004476 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8004456:	4b51      	ldr	r3, [pc, #324]	; (800459c <UART_SetConfig+0x9d0>)
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800445a:	e00c      	b.n	8004476 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800445c:	4b4c      	ldr	r3, [pc, #304]	; (8004590 <UART_SetConfig+0x9c4>)
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004460:	e009      	b.n	8004476 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004468:	e005      	b.n	8004476 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80ea 	beq.w	8004652 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	4a44      	ldr	r2, [pc, #272]	; (8004594 <UART_SetConfig+0x9c8>)
 8004484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004488:	461a      	mov	r2, r3
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004490:	005a      	lsls	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	441a      	add	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	2b0f      	cmp	r3, #15
 80044aa:	d916      	bls.n	80044da <UART_SetConfig+0x90e>
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d212      	bcs.n	80044da <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f023 030f 	bic.w	r3, r3, #15
 80044bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044cc:	4313      	orrs	r3, r2
 80044ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	e0bb      	b.n	8004652 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80044e0:	e0b7      	b.n	8004652 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	dc4a      	bgt.n	8004580 <UART_SetConfig+0x9b4>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f2c0 8086 	blt.w	80045fc <UART_SetConfig+0xa30>
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	f200 8083 	bhi.w	80045fc <UART_SetConfig+0xa30>
 80044f6:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <UART_SetConfig+0x930>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	08004587 	.word	0x08004587
 8004500:	080045a1 	.word	0x080045a1
 8004504:	080045fd 	.word	0x080045fd
 8004508:	080045fd 	.word	0x080045fd
 800450c:	080045a9 	.word	0x080045a9
 8004510:	080045fd 	.word	0x080045fd
 8004514:	080045fd 	.word	0x080045fd
 8004518:	080045fd 	.word	0x080045fd
 800451c:	080045b9 	.word	0x080045b9
 8004520:	080045fd 	.word	0x080045fd
 8004524:	080045fd 	.word	0x080045fd
 8004528:	080045fd 	.word	0x080045fd
 800452c:	080045fd 	.word	0x080045fd
 8004530:	080045fd 	.word	0x080045fd
 8004534:	080045fd 	.word	0x080045fd
 8004538:	080045fd 	.word	0x080045fd
 800453c:	080045c9 	.word	0x080045c9
 8004540:	080045fd 	.word	0x080045fd
 8004544:	080045fd 	.word	0x080045fd
 8004548:	080045fd 	.word	0x080045fd
 800454c:	080045fd 	.word	0x080045fd
 8004550:	080045fd 	.word	0x080045fd
 8004554:	080045fd 	.word	0x080045fd
 8004558:	080045fd 	.word	0x080045fd
 800455c:	080045fd 	.word	0x080045fd
 8004560:	080045fd 	.word	0x080045fd
 8004564:	080045fd 	.word	0x080045fd
 8004568:	080045fd 	.word	0x080045fd
 800456c:	080045fd 	.word	0x080045fd
 8004570:	080045fd 	.word	0x080045fd
 8004574:	080045fd 	.word	0x080045fd
 8004578:	080045fd 	.word	0x080045fd
 800457c:	080045ef 	.word	0x080045ef
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d037      	beq.n	80045f4 <UART_SetConfig+0xa28>
 8004584:	e03a      	b.n	80045fc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004586:	f7fd fe7d 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 800458a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800458c:	e03c      	b.n	8004608 <UART_SetConfig+0xa3c>
 800458e:	bf00      	nop
 8004590:	003d0900 	.word	0x003d0900
 8004594:	08004bf4 	.word	0x08004bf4
 8004598:	58024400 	.word	0x58024400
 800459c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a0:	f7fd fe86 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 80045a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80045a6:	e02f      	b.n	8004608 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045a8:	f107 0314 	add.w	r3, r7, #20
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fe1b 	bl	80031e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b6:	e027      	b.n	8004608 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045b8:	f107 0308 	add.w	r3, r7, #8
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe ff67 	bl	8003490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045c6:	e01f      	b.n	8004608 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c8:	4b2c      	ldr	r3, [pc, #176]	; (800467c <UART_SetConfig+0xab0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80045d4:	4b29      	ldr	r3, [pc, #164]	; (800467c <UART_SetConfig+0xab0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	08db      	lsrs	r3, r3, #3
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	4a28      	ldr	r2, [pc, #160]	; (8004680 <UART_SetConfig+0xab4>)
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045e6:	e00f      	b.n	8004608 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <UART_SetConfig+0xab4>)
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ec:	e00c      	b.n	8004608 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80045ee:	4b25      	ldr	r3, [pc, #148]	; (8004684 <UART_SetConfig+0xab8>)
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045f2:	e009      	b.n	8004608 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045fa:	e005      	b.n	8004608 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004606:	bf00      	nop
    }

    if (pclk != 0U)
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d021      	beq.n	8004652 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <UART_SetConfig+0xabc>)
 8004614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004618:	461a      	mov	r2, r3
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	441a      	add	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d908      	bls.n	800464c <UART_SetConfig+0xa80>
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d204      	bcs.n	800464c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	e002      	b.n	8004652 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800466e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004672:	4618      	mov	r0, r3
 8004674:	3738      	adds	r7, #56	; 0x38
 8004676:	46bd      	mov	sp, r7
 8004678:	bdb0      	pop	{r4, r5, r7, pc}
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400
 8004680:	03d09000 	.word	0x03d09000
 8004684:	003d0900 	.word	0x003d0900
 8004688:	08004bf4 	.word	0x08004bf4

0800468c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478a:	d10a      	bne.n	80047a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e0:	f7fc fa54 	bl	8000c8c <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d10e      	bne.n	8004812 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f82f 	bl	8004866 <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e025      	b.n	800485e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d10e      	bne.n	800483e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f819 	bl	8004866 <UART_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e00f      	b.n	800485e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004876:	e062      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d05e      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fc fa04 	bl	8000c8c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <UART_WaitOnFlagUntilTimeout+0x30>
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d11d      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e045      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d02e      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	d126      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004908:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	429a      	cmp	r2, r3
 800495a:	d08d      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_UARTEx_DisableFifoMode+0x16>
 8004978:	2302      	movs	r3, #2
 800497a:	e027      	b.n	80049cc <HAL_UARTEx_DisableFifoMode+0x66>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	; 0x24
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e02d      	b.n	8004a4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	; 0x24
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f84f 	bl	8004ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e02d      	b.n	8004ac8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f811 	bl	8004ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004af0:	e031      	b.n	8004b56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004af2:	2310      	movs	r3, #16
 8004af4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004af6:	2310      	movs	r3, #16
 8004af8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	0e5b      	lsrs	r3, r3, #25
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	0f5b      	lsrs	r3, r3, #29
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b1a:	7bbb      	ldrb	r3, [r7, #14]
 8004b1c:	7b3a      	ldrb	r2, [r7, #12]
 8004b1e:	4911      	ldr	r1, [pc, #68]	; (8004b64 <UARTEx_SetNbDataToProcess+0x94>)
 8004b20:	5c8a      	ldrb	r2, [r1, r2]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b26:	7b3a      	ldrb	r2, [r7, #12]
 8004b28:	490f      	ldr	r1, [pc, #60]	; (8004b68 <UARTEx_SetNbDataToProcess+0x98>)
 8004b2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	7b7a      	ldrb	r2, [r7, #13]
 8004b3c:	4909      	ldr	r1, [pc, #36]	; (8004b64 <UARTEx_SetNbDataToProcess+0x94>)
 8004b3e:	5c8a      	ldrb	r2, [r1, r2]
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b44:	7b7a      	ldrb	r2, [r7, #13]
 8004b46:	4908      	ldr	r1, [pc, #32]	; (8004b68 <UARTEx_SetNbDataToProcess+0x98>)
 8004b48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	08004c0c 	.word	0x08004c0c
 8004b68:	08004c14 	.word	0x08004c14

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ba4 <__libc_init_array+0x38>)
 8004b70:	4c0d      	ldr	r4, [pc, #52]	; (8004ba8 <__libc_init_array+0x3c>)
 8004b72:	1b64      	subs	r4, r4, r5
 8004b74:	10a4      	asrs	r4, r4, #2
 8004b76:	2600      	movs	r6, #0
 8004b78:	42a6      	cmp	r6, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	4d0b      	ldr	r5, [pc, #44]	; (8004bac <__libc_init_array+0x40>)
 8004b7e:	4c0c      	ldr	r4, [pc, #48]	; (8004bb0 <__libc_init_array+0x44>)
 8004b80:	f000 f820 	bl	8004bc4 <_init>
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	2600      	movs	r6, #0
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b94:	4798      	blx	r3
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9e:	4798      	blx	r3
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	08004c24 	.word	0x08004c24
 8004ba8:	08004c24 	.word	0x08004c24
 8004bac:	08004c24 	.word	0x08004c24
 8004bb0:	08004c28 	.word	0x08004c28

08004bb4 <memset>:
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
